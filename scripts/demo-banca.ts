import { Transaction } from '../src/domain/entities/Transaction';
import { Category } from '../src/domain/entities/Category';
import { FinancialAnalysisService } from '../src/domain/services/FinancialAnalysisService';
import { Money } from '../src/domain/value-objects/Money';
import { InMemoryTransactionRepository } from '../src/infrastructure/repositories/InMemoryTransactionRepository';
import { InMemoryCategoryRepository } from '../src/infrastructure/repositories/InMemoryCategoryRepository';
import { CreateTransactionUseCase } from '../src/application/use-cases/CreateTransactionUseCase';
import { GetFinancialAnalysisUseCase } from '../src/application/use-cases/GetFinancialAnalysisUseCase';

class DemoBanca {
  private transactionRepository: InMemoryTransactionRepository;
  private categoryRepository: InMemoryCategoryRepository;
  private createTransactionUseCase: CreateTransactionUseCase;
  private getAnalysisUseCase: GetFinancialAnalysisUseCase;
  private analysisService: FinancialAnalysisService;

  constructor() {
    this.transactionRepository = new InMemoryTransactionRepository();
    this.categoryRepository = new InMemoryCategoryRepository();
    this.createTransactionUseCase = new CreateTransactionUseCase(
      this.transactionRepository,
      this.categoryRepository
    );
    this.getAnalysisUseCase = new GetFinancialAnalysisUseCase(this.transactionRepository);
    this.analysisService = new FinancialAnalysisService();
  }

  async run(): Promise<void> {
    console.clear();
    this.printHeader();
    
    await this.demonstrateDomainModel();
    await this.demonstrateAutomaticCategorization();
    await this.demonstrateFinancialAnalysis();
    await this.demonstrateBusinessRules();
    await this.demonstrateUseCases();
    await this.demonstrateApiEndpoints();

    this.printConclusion();
  }

  private printHeader(): void {
    console.log('='.repeat(80));
    console.log('üéì DEMONSTRA√á√ÉO PARA BANCA EXAMINADORA - TCC ENGENHARIA DE SOFTWARE');
    console.log('üí∞ SISTEMA DE GEST√ÉO FINANCEIRA PESSOAL COM DOMAIN-DRIVEN DESIGN');
    console.log('='.repeat(80));
    console.log();
  }

  private async demonstrateDomainModel(): Promise<void> {
    console.log('1. üèóÔ∏è  MODELAGEM DE DOM√çNIO (DDD)');
    console.log('   üìê Entidades, Value Objects e Servi√ßos de Dom√≠nio');
    console.log();

    // Demonstra√ß√£o das Entidades
    const foodCategory = new Category({
      name: 'Alimenta√ß√£o',
      keywords: ['restaurante', 'mercado', 'lanche'],
    });

    const salaryCategory = new Category({
      name: 'Sal√°rio',
      keywords: ['sal√°rio', 'pagamento'],
      allowedTypes: ['RECEITA']
    });

    const transaction = new Transaction({
      id: '1',
      description: 'Almo√ßo no restaurante',
      amount: 45.50,
      date: new Date('2024-01-15'),
      category: foodCategory,
      type: 'DESPESA'
    });

    console.log('   üì¶ ENTIDADE: Transaction');
    console.log(`      - Descri√ß√£o: ${transaction.description}`);
    console.log(`      - Valor: R$ ${transaction.amount}`);
    console.log(`      - Tipo: ${transaction.type}`);
    console.log(`      - Categoria: ${transaction.category.name}`);
    console.log(`      - √â despesa? ${transaction.isExpense()}`);
    console.log();

    console.log('   üéØ VALUE OBJECT: Money');
    const money = new Money(150.75);
    console.log(`      - Valor: ${money.getValue()}`);
    console.log(`      - Formatado: ${money.format()}`);
    console.log();

    console.log('   üîß SERVI√áO DE DOM√çNIO: FinancialAnalysisService');
    console.log('      - Encapsula regras complexas de an√°lise financeira');
    console.log('      - Isolado de infraestrutura e frameworks');
    console.log();

    console.log('‚îÄ'.repeat(60));
    console.log();
  }

  private async demonstrateAutomaticCategorization(): Promise<void> {
    console.log('2. ü§ñ CATEGORIZA√á√ÉO AUTOM√ÅTICA');
    console.log('   üéØ Sistema inteligente de classifica√ß√£o por palavras-chave');
    console.log();

    const testDescriptions = [
      'Almo√ßo no restaurante Sabor Mineiro',
      'Gasolina no posto Shell',
      'Pagamento de aluguel',
      'Sal√°rio mensal',
      'Consulta m√©dica no Dr. Silva',
      'Compra no mercado Extra',
      'Assinatura Netflix'
    ];

    const categories = await this.categoryRepository.findAll();

    console.log('   üìã TESTES DE CATEGORIZA√á√ÉO:');
    testDescriptions.forEach(description => {
      const category = Category.categorizeTransaction(description, categories);
      console.log(`      üìù "${description}"`);
      console.log(`         ‚Üí üè∑Ô∏è  ${category.name}`);
    });

    console.log();
    console.log('‚îÄ'.repeat(60));
    console.log();
  }

  private async demonstrateFinancialAnalysis(): Promise<void> {
    console.log('3. üìä AN√ÅLISE FINANCEIRA AVAN√áADA');
    console.log('   üí° Insights acion√°veis para tomada de decis√£o');
    console.log();

    // Criar transa√ß√µes de exemplo
    const sampleTransactions = await this.createSampleTransactions();
    const analysis = this.analysisService.analyze(sampleTransactions);

    console.log('   üìà VIS√ÉO GERAL:');
    console.log(`      üí∞ Receitas Totais: ${analysis.totalIncome.format()}`);
    console.log(`      üí∏ Despesas Totais: ${analysis.totalExpenses.format()}`);
    console.log(`      ‚öñÔ∏è  Saldo: ${analysis.balance.format()}`);
    console.log(`      üìä Sa√∫de Financeira: ${analysis.balance.getValue() >= 0 ? '‚úÖ Positiva' : '‚ùå Negativa'}`);
    console.log();

    console.log('   ü•á TOP 3 GASTOS:');
    analysis.topExpenses.forEach((expense, index) => {
      const medals = ['ü•á', 'ü•à', 'ü•â'];
      console.log(`      ${medals[index]} ${expense.category}: ${expense.total.format()} (${expense.percentage.toFixed(1)}%)`);
    });
    console.log();

    console.log('   üìã DETALHAMENTO POR CATEGORIA:');
    analysis.categorySummaries.forEach(summary => {
      const barLength = Math.max(1, Math.round(summary.percentage / 3));
      const bar = '‚ñà'.repeat(barLength);
      console.log(`      üì¶ ${summary.category.padEnd(15)} ${bar} ${summary.percentage.toFixed(1)}% (${summary.total.format()})`);
    });

    console.log();
    console.log('‚îÄ'.repeat(60));
    console.log();
  }

  private async demonstrateBusinessRules(): Promise<void> {
    console.log('4. üõ°Ô∏è  REGRAS DE NEG√ìCIO (Invariantes de Dom√≠nio)');
    console.log('   üîí Valida√ß√µes que garantem a consist√™ncia do sistema');
    console.log();

    const categories = await this.categoryRepository.findAll();
    const salaryCategory = categories.find(c => c.name === 'Salary')!;

    console.log('   ‚úÖ CASO V√ÅLIDO: Sal√°rio como receita');
    try {
      const validTransaction = new Transaction({
        id: 'valid-1',
        description: 'Sal√°rio mensal',
        amount: 3000,
        date: new Date(),
        category: salaryCategory,
        type: 'RECEITA'
      });
      console.log(`      ‚úì Transa√ß√£o criada: ${validTransaction.description} - R$ ${validTransaction.amount}`);
    } catch (error) {
      console.log(`      ‚ùå Erro inesperado: ${error}`);
    }

    console.log();
    console.log('   ‚ùå CASO INV√ÅLIDO: Tentativa de sal√°rio como despesa');
    try {
      const invalidTransaction = new Transaction({
        id: 'invalid-1',
        description: 'Sal√°rio como despesa?',
        amount: 3000,
        date: new Date(),
        category: salaryCategory,
        type: 'DESPESA' // Isso deve falhar!
      });
      console.log(`      ‚ùå Transa√ß√£o criada (isso n√£o deveria acontecer!)`);
    } catch (error: any) {
      console.log(`      ‚úÖ Regra aplicada: "${error.message}"`);
    }

    console.log();
    console.log('   üîÑ OUTRAS REGRAS IMPLEMENTADAS:');
    console.log('      ‚úì Valores de transa√ß√£o n√£o podem ser negativos');
    console.log('      ‚úì Categorias espec√≠ficas s√≥ permitem certos tipos');
    console.log('      ‚úì Data da transa√ß√£o n√£o pode ser futura (opcional)');

    console.log();
    console.log('‚îÄ'.repeat(60));
    console.log();
  }

  private async demonstrateUseCases(): Promise<void> {
    console.log('5. üéØ CASOS DE USO (Application Layer)');
    console.log('   üöÄ Orquestra√ß√£o entre dom√≠nio e infraestrutura');
    console.log();

    console.log('   üì• CRIANDO TRANSA√á√ïES:');
    
    // Criar algumas transa√ß√µes via Use Case
    const transactionsToCreate = [
      { description: 'Almo√ßo executivo', amount: 35, type: 'DESPESA' as const },
      { description: 'Sal√°rio empresa XYZ', amount: 2850, type: 'RECEITA' as const },
      { description: 'Combust√≠vel', amount: 180, type: 'DESPESA' as const }
    ];

    for (const transactionData of transactionsToCreate) {
      try {
        const transaction = await this.createTransactionUseCase.execute(transactionData);
        console.log(`      ‚úÖ "${transaction.description}" - ${transaction.amount} - ${transaction.category.name}`);
      } catch (error: any) {
        console.log(`      ‚ùå Erro: ${error.message}`);
      }
    }

    console.log();
    console.log('   üìä OBTENDO AN√ÅLISE VIA USE CASE:');
    try {
      const analysis = await this.getAnalysisUseCase.execute();
      console.log(`      üìà Saldo atual: ${analysis.balance.format()}`);
      console.log(`      üìã Categorias analisadas: ${analysis.categorySummaries.length}`);
      console.log(`      üéØ Maior gasto: ${analysis.topExpenses[0]?.category || 'Nenhum'}`);
    } catch (error: any) {
      console.log(`      ‚ùå Erro na an√°lise: ${error.message}`);
    }

    console.log();
    console.log('‚îÄ'.repeat(60));
    console.log();
  }

  private async demonstrateApiEndpoints(): Promise<void> {
    console.log('6. üåê API REST (Infrastructure Layer)');
    console.log('   üîå Endpoints dispon√≠veis para integra√ß√£o');
    console.log();

    console.log('   üìç ENDPOINTS DISPON√çVEIS:');
    console.log('      POST /transactions    ‚Üí Criar transa√ß√£o');
    console.log('      GET  /transactions    ‚Üí Listar transa√ß√µes');
    console.log('      GET  /analysis        ‚Üí An√°lise financeira completa');
    console.log('      GET  /analysis?startDate=...&endDate=... ‚Üí An√°lise por per√≠odo');
    console.log('      GET  /health          ‚Üí Status do servi√ßo');
    console.log();

    console.log('   üí° EXEMPLO DE REQUISI√á√ÉO:');
    console.log('      curl -X POST http://localhost:3000/transactions \\');
    console.log('        -H "Content-Type: application/json" \\');
    console.log('        -d \'{"description": "Almo√ßo", "amount": 45, "type": "EXPENSE"}\'');
    console.log();

    console.log('   üõ°Ô∏è  CARACTER√çSTICAS DA API:');
    console.log('      ‚úÖ Valida√ß√£o de dados de entrada');
    console.log('      ‚úÖ Tratamento de erros padronizado');
    console.log('      ‚úÖ Respostas em JSON');
    console.log('      ‚úÖ Headers CORS configurados');

    console.log();
    console.log('‚îÄ'.repeat(60));
    console.log();
  }

  private printConclusion(): void {
    console.log('7. üéì CONCLUS√ïES E DIFERENCIAIS');
    console.log();

    console.log('   ‚úÖ DOMAIN-DRIVEN DESIGN APLICADO:');
    console.log('      ‚úì Linguagem Ub√≠qua incorporada no c√≥digo');
    console.log('      ‚úì Separa√ß√£o clara de responsabilidades');
    console.log('      ‚úì Dom√≠nio rico com comportamentos');
    console.log('      ‚úì Arquitetura hexagonal implementada');
    console.log();

    console.log('   ‚úÖ VALOR PARA O USU√ÅRIO FINAL:');
    console.log('      ‚úì Insights acion√°veis sobre gastos');
    console.log('      ‚úì Simplicidade para usu√°rios leigos');
    console.log('      ‚úì Foco em renda limitada (at√© R$ 3.000)');
    console.log('      ‚úì Categoriza√ß√£o autom√°tica inteligente');
    console.log();

    console.log('   ‚úÖ ASPECTOS T√âCNICOS:');
    console.log('      ‚úì Cobertura de testes abrangente');
    console.log('      ‚úì C√≥digo em ingl√™s (padr√£o mercado)');
    console.log('      ‚úì Testes em portugu√™s (facilita banca)');
    console.log('      ‚úì Documenta√ß√£o completa');
    console.log();

    console.log('='.repeat(80));
    console.log('üéâ DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO!');
    console.log('üìö Projeto v√°lido para TCC de Engenharia de Software');
    console.log('üë®‚Äçüíª Desenvolvido por: Marlon C. Silva');
    console.log('='.repeat(80));
  }

  private async createSampleTransactions(): Promise<Transaction[]> {
    const categories = await this.categoryRepository.findAll();
    
    return [
      new Transaction({
        id: '1',
        description: 'Almo√ßo restaurante',
        amount: 45,
        date: new Date('2024-01-15'),
        category: Category.categorizeTransaction('Almo√ßo restaurante', categories),
        type: 'DESPESA'
      }),
      new Transaction({
        id: '2',
        description: 'Gasolina carro',
        amount: 180,
        date: new Date('2024-01-16'),
        category: Category.categorizeTransaction('Gasolina carro', categories),
        type: 'DESPESA'
      }),
      new Transaction({
        id: '3',
        description: 'Mercado mensal',
        amount: 220,
        date: new Date('2024-01-17'),
        category: Category.categorizeTransaction('Mercado mensal', categories),
        type: 'DESPESA'
      }),
      new Transaction({
        id: '4',
        description: 'Aluguel apartamento',
        amount: 950,
        date: new Date('2024-01-05'),
        category: Category.categorizeTransaction('Aluguel apartamento', categories),
        type: 'DESPESA'
      }),
      new Transaction({
        id: '5',
        description: 'Sal√°rio empresa',
        amount: 3000,
        date: new Date('2024-01-05'),
        category: Category.categorizeTransaction('Sal√°rio empresa', categories),
        type: 'RECEITA'
      }),
      new Transaction({
        id: '6',
        description: 'Consulta m√©dica',
        amount: 150,
        date: new Date('2024-01-20'),
        category: Category.categorizeTransaction('Consulta m√©dica', categories),
        type: 'DESPESA'
      }),
      new Transaction({
        id: '7',
        description: 'Cinema',
        amount: 80,
        date: new Date('2024-01-25'),
        category: Category.categorizeTransaction('Cinema', categories),
        type: 'DESPESA'
      })
    ];
  }
}

// Executar a demonstra√ß√£o
const demo = new DemoBanca();
demo.run().catch(console.error);